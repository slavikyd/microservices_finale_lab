# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import warnings

import grpc

from . import main_pb2 as main__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in main_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CentrifugoProxyStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Connect = channel.unary_unary(
                '/centrifugal.centrifugo.proxy.CentrifugoProxy/Connect',
                request_serializer=main__pb2.ConnectRequest.SerializeToString,
                response_deserializer=main__pb2.ConnectResponse.FromString,
                _registered_method=True)
        self.Refresh = channel.unary_unary(
                '/centrifugal.centrifugo.proxy.CentrifugoProxy/Refresh',
                request_serializer=main__pb2.RefreshRequest.SerializeToString,
                response_deserializer=main__pb2.RefreshResponse.FromString,
                _registered_method=True)
        self.Subscribe = channel.unary_unary(
                '/centrifugal.centrifugo.proxy.CentrifugoProxy/Subscribe',
                request_serializer=main__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=main__pb2.SubscribeResponse.FromString,
                _registered_method=True)
        self.Publish = channel.unary_unary(
                '/centrifugal.centrifugo.proxy.CentrifugoProxy/Publish',
                request_serializer=main__pb2.PublishRequest.SerializeToString,
                response_deserializer=main__pb2.PublishResponse.FromString,
                _registered_method=True)
        self.RPC = channel.unary_unary(
                '/centrifugal.centrifugo.proxy.CentrifugoProxy/RPC',
                request_serializer=main__pb2.RPCRequest.SerializeToString,
                response_deserializer=main__pb2.RPCResponse.FromString,
                _registered_method=True)
        self.SubRefresh = channel.unary_unary(
                '/centrifugal.centrifugo.proxy.CentrifugoProxy/SubRefresh',
                request_serializer=main__pb2.SubRefreshRequest.SerializeToString,
                response_deserializer=main__pb2.SubRefreshResponse.FromString,
                _registered_method=True)
        self.SubscribeUnidirectional = channel.unary_stream(
                '/centrifugal.centrifugo.proxy.CentrifugoProxy/SubscribeUnidirectional',
                request_serializer=main__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=main__pb2.StreamSubscribeResponse.FromString,
                _registered_method=True)
        self.SubscribeBidirectional = channel.stream_stream(
                '/centrifugal.centrifugo.proxy.CentrifugoProxy/SubscribeBidirectional',
                request_serializer=main__pb2.StreamSubscribeRequest.SerializeToString,
                response_deserializer=main__pb2.StreamSubscribeResponse.FromString,
                _registered_method=True)
        self.NotifyCacheEmpty = channel.unary_unary(
                '/centrifugal.centrifugo.proxy.CentrifugoProxy/NotifyCacheEmpty',
                request_serializer=main__pb2.NotifyCacheEmptyRequest.SerializeToString,
                response_deserializer=main__pb2.NotifyCacheEmptyResponse.FromString,
                _registered_method=True)
        self.NotifyChannelState = channel.unary_unary(
                '/centrifugal.centrifugo.proxy.CentrifugoProxy/NotifyChannelState',
                request_serializer=main__pb2.NotifyChannelStateRequest.SerializeToString,
                response_deserializer=main__pb2.NotifyChannelStateResponse.FromString,
                _registered_method=True)


class CentrifugoProxyServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Connect(self, request, context):
        """Connect to proxy connection authentication and communicate initial state.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Refresh(self, request, context):
        """Refresh to proxy decision about connection expiration to the app backend.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Subscribe to proxy subscription attempts to channels.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Publish(self, request, context):
        """Publish to proxy publication attempts to channels.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RPC(self, request, context):
        """RPC to execute custom logic on the backend over request through the real-time connection.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubRefresh(self, request, context):
        """SubRefresh to proxy decision about subscription expiration to the app backend.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeUnidirectional(self, request, context):
        """SubscribeUnidirectional is an EXPERIMENTAL method which allows handling unidirectional
        subscription streams. Stream starts with SubscribeRequest similar to Subscribe rpc,
        then expects StreamSubscribeResponse with SubscribeResponse as first message, and
        StreamSubscribeResponse with Publication afterwards.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeBidirectional(self, request_iterator, context):
        """SubscribeBidirectional is an EXPERIMENTAL method which allows handling bidirectional
        subscription streams. Stream receives StreamSubscribeRequest. First StreamSubscribeRequest
        always contains SubscribeRequest, then StreamSubscribeRequest will contain data published
        by client. Reverse direction works the same way as in SubscribeUnidirectional.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyCacheEmpty(self, request, context):
        """NotifyCacheEmpty is an EXPERIMENTAL method which allows to load documents from the backend.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyChannelState(self, request, context):
        """NotifyChannelState can be used to receive channel events such as channel "occupied" and "vacated".
        This is a feature in a preview state and is only available in Centrifugo PRO.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CentrifugoProxyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=main__pb2.ConnectRequest.FromString,
                    response_serializer=main__pb2.ConnectResponse.SerializeToString,
            ),
            'Refresh': grpc.unary_unary_rpc_method_handler(
                    servicer.Refresh,
                    request_deserializer=main__pb2.RefreshRequest.FromString,
                    response_serializer=main__pb2.RefreshResponse.SerializeToString,
            ),
            'Subscribe': grpc.unary_unary_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=main__pb2.SubscribeRequest.FromString,
                    response_serializer=main__pb2.SubscribeResponse.SerializeToString,
            ),
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=main__pb2.PublishRequest.FromString,
                    response_serializer=main__pb2.PublishResponse.SerializeToString,
            ),
            'RPC': grpc.unary_unary_rpc_method_handler(
                    servicer.RPC,
                    request_deserializer=main__pb2.RPCRequest.FromString,
                    response_serializer=main__pb2.RPCResponse.SerializeToString,
            ),
            'SubRefresh': grpc.unary_unary_rpc_method_handler(
                    servicer.SubRefresh,
                    request_deserializer=main__pb2.SubRefreshRequest.FromString,
                    response_serializer=main__pb2.SubRefreshResponse.SerializeToString,
            ),
            'SubscribeUnidirectional': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeUnidirectional,
                    request_deserializer=main__pb2.SubscribeRequest.FromString,
                    response_serializer=main__pb2.StreamSubscribeResponse.SerializeToString,
            ),
            'SubscribeBidirectional': grpc.stream_stream_rpc_method_handler(
                    servicer.SubscribeBidirectional,
                    request_deserializer=main__pb2.StreamSubscribeRequest.FromString,
                    response_serializer=main__pb2.StreamSubscribeResponse.SerializeToString,
            ),
            'NotifyCacheEmpty': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyCacheEmpty,
                    request_deserializer=main__pb2.NotifyCacheEmptyRequest.FromString,
                    response_serializer=main__pb2.NotifyCacheEmptyResponse.SerializeToString,
            ),
            'NotifyChannelState': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyChannelState,
                    request_deserializer=main__pb2.NotifyChannelStateRequest.FromString,
                    response_serializer=main__pb2.NotifyChannelStateResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'centrifugal.centrifugo.proxy.CentrifugoProxy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('centrifugal.centrifugo.proxy.CentrifugoProxy', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CentrifugoProxy(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/centrifugal.centrifugo.proxy.CentrifugoProxy/Connect',
            main__pb2.ConnectRequest.SerializeToString,
            main__pb2.ConnectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Refresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/centrifugal.centrifugo.proxy.CentrifugoProxy/Refresh',
            main__pb2.RefreshRequest.SerializeToString,
            main__pb2.RefreshResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/centrifugal.centrifugo.proxy.CentrifugoProxy/Subscribe',
            main__pb2.SubscribeRequest.SerializeToString,
            main__pb2.SubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/centrifugal.centrifugo.proxy.CentrifugoProxy/Publish',
            main__pb2.PublishRequest.SerializeToString,
            main__pb2.PublishResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RPC(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/centrifugal.centrifugo.proxy.CentrifugoProxy/RPC',
            main__pb2.RPCRequest.SerializeToString,
            main__pb2.RPCResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubRefresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/centrifugal.centrifugo.proxy.CentrifugoProxy/SubRefresh',
            main__pb2.SubRefreshRequest.SerializeToString,
            main__pb2.SubRefreshResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeUnidirectional(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/centrifugal.centrifugo.proxy.CentrifugoProxy/SubscribeUnidirectional',
            main__pb2.SubscribeRequest.SerializeToString,
            main__pb2.StreamSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeBidirectional(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/centrifugal.centrifugo.proxy.CentrifugoProxy/SubscribeBidirectional',
            main__pb2.StreamSubscribeRequest.SerializeToString,
            main__pb2.StreamSubscribeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifyCacheEmpty(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/centrifugal.centrifugo.proxy.CentrifugoProxy/NotifyCacheEmpty',
            main__pb2.NotifyCacheEmptyRequest.SerializeToString,
            main__pb2.NotifyCacheEmptyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifyChannelState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/centrifugal.centrifugo.proxy.CentrifugoProxy/NotifyChannelState',
            main__pb2.NotifyChannelStateRequest.SerializeToString,
            main__pb2.NotifyChannelStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
